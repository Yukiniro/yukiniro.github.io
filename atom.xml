<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yukiniro</title>
  
  <subtitle>Study And Share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-11T14:19:03.843Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yukiniro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于对象属性及其特性</title>
    <link href="http://yoursite.com/2019/04/11/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%8F%8A%E5%85%B6%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/04/11/关于对象属性及其特性/</id>
    <published>2019-04-11T12:23:42.000Z</published>
    <updated>2019-04-11T14:19:03.843Z</updated>
    
    <content type="html"><![CDATA[<p><strong>特性</strong>用以描述属性的各种特征。这些特性是为了实现 <code>JavaScript</code>  引擎用的，所有<br>在<code>JavaScript</code>中不能直接访问。</p><blockquote><p><strong>数据属性</strong></p></blockquote><ol><li><code>[[Configurable]]</code> :  表示能否通过<code>delete</code>删除属性从而重新定义属性，能否<br>修改属性的特性，或者能否把属性修改为访问器属性。默认为<code>true</code></li><li><code>[[Enumerable]]</code>:     表示能否通过<code>for-in</code>遍历。默认为<code>true</code></li><li><code>[[Writable]]</code>: 表示能否修改属性的值。默认为<code>true</code></li><li><code>[[Value]]</code>: 包含这个属性的数据值。默认为<code>undefined</code></li></ol><blockquote><p><strong>访问器属性</strong></p></blockquote><p>  1.<code>[[Configurable]]</code>  :  表示能否通过<code>delete</code>删除属性从而重新定义属性，能否<br>  修改属性的特性，或者能否把属性修改为访问器属性。默认为<code>true</code></p><ol start="2"><li><code>[[Enumerable]]</code>:     表示能否通过<code>for-in</code>遍历。默认为<code>true</code></li><li><code>[[getter]]</code>: 在读取属性时调用的函数。默认值是<code>undefined</code></li><li><code>[[setter]]</code>: 在写入属性时调用的函数。默认值是<code>undefined</code></li></ol><blockquote><p><strong>属性操作</strong></p></blockquote><ul><li><p>定义属性特性</p><p><code>Object.defineProperty</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;特性&lt;/strong&gt;用以描述属性的各种特征。这些特性是为了实现 &lt;code&gt;JavaScript&lt;/code&gt;  引擎用的，所有&lt;br&gt;在&lt;code&gt;JavaScript&lt;/code&gt;中不能直接访问。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于var、let及const</title>
    <link href="http://yoursite.com/2019/03/21/%E5%85%B3%E4%BA%8Evar%E3%80%81let%E5%8F%8Aconst/"/>
    <id>http://yoursite.com/2019/03/21/关于var、let及const/</id>
    <published>2019-03-21T14:26:10.000Z</published>
    <updated>2019-04-11T14:09:10.958Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>var</code> <code>let</code> 以及 <code>const</code>的作用都是用来声明变量的，不过其应用场景和副作用都<br>有所不同。</p><blockquote><p><strong>作用域</strong></p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>var</code>声明的变量的作用域是当前执行上下文，比如全局作用域或者函数作用域，但是没有块级作用域，并且在全局作用域声明的话会自动挂载到全局对象。而<code>let</code>与<code>const</code>不会挂载到全局对象，但是它们却有块级作用域</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">'b'</span>;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="string">'c'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure></code></pre><p>上面代码中<code>a</code>可以正常输出，而<code>b</code>,<code>c</code>会报错，原因就是块级作用域的区别。</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上面这个例子中，本来的需求是输出<code>0, 1, ... 9</code>，但实际上输出的是<code>10, 10...10</code>因为<code>var</code>声明的变量没有块级作用域，循环体中访问的<code>i</code>是同一个变量。所有在循环做完后<code>i</code>的值便为<code>10</code>,然后输出。要解决这个问题，可以将循环体做成一个闭包，然后将<code>i</code>传进去。 不过最简单的是将<code>var</code>替换为<code>let</code>，这样就会有块级作用域，也就是说每个循环体里的变量<code>i</code>都是单独的个体，</p><blockquote><p><strong>声明提升</strong></p></blockquote><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>JavaScript</code>中的变量以及函数的声明会提升到当前作用域顶端（函数表达式不会进行声明，这里不对函数的声明提升进行讨论）。</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></code></pre><p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里可以输出<code>a</code>，不过值时<code>undefined</code>，而输出<code>b</code>，<code>c</code>时却会报错，也就是说,<code>var</code>会进行申明提升，而<code>let</code>,<code>const</code>不会进行提升。<br></p><blockquote><p>不过<a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="noopener">我用了两个月的时间才理解 let</a><br>  这篇文章对<code>let</code>是否有提升有不同的解释，网上关于<code>let</code>是否提升也有不同的说法，<br>  可以作为参考</p></blockquote><blockquote><p><strong>暂时性死区</strong></p></blockquote><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 ECMAScript 2015 中，let 绑定不受变量提升的约束，这意味着 let  声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener">MDN</a>关于<code>let</code>暂时性死区的介绍。简单来说就是：在作用域开始到<code>let</code>  <code>const</code>声明的这个区间会形成一个封闭的区域，而在这个区域内访问未声明的变量便会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;var&lt;/code&gt; &lt;code&gt;let&lt;/code&gt; 以及 &lt;code&gt;const&lt;/code&gt;的作用都是用来声明变量的，不过其应用场景和副作用都&lt;br&gt;有所不同。
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React中的合成事件（SyntheticEvent）</title>
    <link href="http://yoursite.com/2019/03/19/React%E4%B8%AD%E7%9A%84%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%EF%BC%88SyntheticEvent%EF%BC%89/"/>
    <id>http://yoursite.com/2019/03/19/React中的合成事件（SyntheticEvent）/</id>
    <published>2019-03-19T14:38:56.000Z</published>
    <updated>2019-04-11T14:09:10.610Z</updated>
    
    <content type="html"><![CDATA[<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventTest</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;button onClick=&#123;this.childClick&#125;&gt;child&lt;/button&gt;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    childClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.target);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(e.target)&#125;, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'child click'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上图所示，在<code>React</code>中一般绑定事件都会在JSX中进行。出于对性能的考虑，<br>React会创建一个合成事件<code>SyntheticEvent</code>，也就是说，<code>this.childClick</code>，<br>方法并不会绑定在<code>button</code>上而是会绑定在<code>document</code>上进行统一处理，并且在此<br>基础上会将此事件放在事件池中，也就是说此事件对象有可能被重用，所有在事件回调<br>完成后，事件对象上的所有属性都会失效。</p><blockquote><p><strong>事件的异步访问</strong></p></blockquote><p>  <img src="../images/console1.PNG" alt><br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述代码在点击<code>button</code>后会有以上输出信息，之前说过，合成事件在异步访问时其属性都会失效，并且会弹出类型警告。如果确实需要在异步中作处理，可以调用<code>event.persist()</code>方法将此事件从池中移除，使用户代码保留对此事件对象的<br>引用。另外还可以在异步前将需要的事件属性保留下来然后在异步中使用。</p><blockquote><p><strong>原生事件</strong></p></blockquote><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>React</code>的合成事件几乎涵盖了所有的原生事件，但是也存在不得不使用原生事件的业务逻辑。<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有就需要通过<code>ref</code>获取真实的DOM，然后在<code>componentDidMount</code>中进行事件绑定（<code>addEventListener</code>）,不过要记得在<code>componentWillUnmount</code>中移除（<code>removeEventListener</code>）绑定的事件,因为过多的事件监听会影响效率。</p><blockquote><p><strong>合成事件与原生事件的混用</strong>‘</p></blockquote><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原生事件绑定在DOM上，合成事件绑定在<code>document</code>上，所以它们在执行顺序上会有所差异。</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventTest</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.parentClick)</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div ref=&#123;ele =&gt; <span class="keyword">this</span>.parent = ele&#125;&gt;</span><br><span class="line">                    parent</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.childClick&#125;&gt;child&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        childClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'child click'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        parentClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'parent click'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><p>  上述代码会先输出<code>parent click</code>然后输出<code>child click</code>,如果在<code>childClick</code><br>  回调中阻止冒泡，输出结果不变; 如果在<code>parentClick</code>回调中阻止冒泡便只会输出<br>  <code>parent click</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
      <category term="React, JavaScript" scheme="http://yoursite.com/tags/React-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于React中的this</title>
    <link href="http://yoursite.com/2019/03/18/%E5%85%B3%E4%BA%8EReact%E4%B8%AD%E7%9A%84this/"/>
    <id>http://yoursite.com/2019/03/18/关于React中的this/</id>
    <published>2019-03-18T13:55:35.000Z</published>
    <updated>2019-04-11T14:03:43.859Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>组件中的<code>this</code></strong></p></blockquote><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>React</code>组件内部很容易理解为访问的是组件实例，但是实际上却是不一定的。</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> &lt;button onClick=&#123;this.handleClick&#125;&gt;button&lt;/button&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleClick () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  上述代码中会分别输出组件实例和undefined。<br><br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为在<code>JavaScript</code>中this的指向并不是在函数定义时决定的，而是在函数调用时决定的，同样的，<code>React</code>中也遵循了这种机制（不过<code>React</code>的生命周期函数中<code>this</code>为组件实例），所有在需要用到this的地方就需要绑定，一般有以下几种：</p><blockquote><p><strong>createClass自动绑定</strong></p></blockquote><p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>createClass</code>创建组件，这样会自动绑定将<code>this</code>指向组件实例，不过现在<br>   创建组件一般是<code>class</code>组件或者<code>Function</code>组件，不推荐使用这种方法。</p><blockquote><p><strong>constructor中绑定</strong></p></blockquote><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>   没有明显的副作用，但是麻烦，懒得写。</p><blockquote><p><strong>JSX中绑定</strong></p></blockquote><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;button&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;(e) =&gt; &#123;this.handleClick(e)&#125;&#125;&gt;button&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure></code></pre><p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这两种方法会有效率问题，在每次渲染时创建新的函数进行传递，如果是原生标签问题不大，但如果是组件标签会造成此组件不必要的渲染。</p><blockquote><p><strong>箭头函数</strong></p></blockquote><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;箭头函数（上一个使用的也是）会在定义时在当前作用域中的<code>this</code>绑定到函数<br>   中。所有箭头函数中访问的<code>this</code>是组件实例</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;组件中的&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在&lt;code&gt;React&lt;/
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
</feed>
